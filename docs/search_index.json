[["preface.html", "Exploratory data analysis for cancer biologists Preface", " Exploratory data analysis for cancer biologists A M Mahedi Hasan 2023-04-10 Preface After failing twice in my driving practical test, I took some time off from driving lessons. The reason was, partly, financial. It was also the beginning of the shorter days of winter and I was a bit worried of taking the exam during those cold days when the roads in Edinburgh became a bit tricky to drive. In the next summer, when I tried to contact my driving instructor, to my surprise, I came to know that he had changed his profession. Well, my wife still blames me in secret.To be honest with you, it was not the first time that my driving instructor had stopped training people (though my first instructor had some family responsibilities and took a break). So, I went to the third driving instructor, Bill. He was in his late 70s, I guess, and initially I had hard time understand what he was saying. You may think that it’s not ideal at all for a driving lesson. But interestingly enough, it worked out in the end and I got my driving license this time. Anyway, Bill used to be an engineer and after his retirement, he started his second career as a driving instructor. On the first day, Bill told me to forget everything I had learned so far on driving. I was a bit shocked indeed with his condescending approach, but when he started the lesson it felt like he was teaching me the grammar of driving - how to control the clutch, how to read the mind the driver of an oncoming vehicle etc. By now, you may have started to wander, what does Bill have anything to do with you or this workshop? Bear with me. Each time I think about two R packages, namely dpylr and ggplot2, they remind me of Bill. In this workshop on R, we will learn the grammar of data manipulation and grammar of graphics to draw fancy plots for our exploratory analysis. What you have learned in the previous workshop, was not even the tip of an iceberg of plotting with R. Those function that we used were a bit rigid and you have less control over. But here, with the package ggplot2, we will shape up the plots as we wish. We will draw layer upon layer to incorporate so many aspects of the data in a single plot. And for the data handling, we will use dplyr package. We will add layer of functions, as we think, to build our data structure for downstream analysis. And as a whole, we will try to tell a story with our data and the plots that we will generate today. "],["data-manipulation-using-dplyr.html", "Data manipulation using dplyr 0.1 Install 0.2 Pipe operator %&gt;% 0.3 dplyr verbs", " Data manipulation using dplyr Trust me, this is the part of my research where I spend a significant portion of my time. Real-life data are not polished and nicely annotated. Moreover, when you want to integrate data from different sources, the fun begins (I am showing the quotation finger. of course)! Even you need to format the output from one process and make it worthy for the next one. So, there’s no escape from data formatting / manipulating in real-life. Here, we will be using the dplyr package which is one of the most powerful and popular packages in R. The d here represents data and plyr is supposed to be the tool plier (ref). Therefore, dplyr packages refers to a tool to manipulate data frame. dplyr provides a grammar of data manipulation and the functions it provides are regarded as the verbs in the code and are very efficient in solving most common data manipulation problems. It is sometimes arguably more efficient than the base R operations. 0.1 Install There are mainly two ways to install dplyr package in R. You can install the tidyverse package and dplyr, being a part of it, will automatically be installed in your R environment. # install.packages(&quot;tidyverse&quot;) library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.1 ✔ readr 2.1.4 ## ✔ forcats 1.0.0 ✔ stringr 1.5.0 ## ✔ ggplot2 3.4.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.2 ✔ tidyr 1.3.0 ## ✔ purrr 1.0.1 ## ── Conflicts ────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors Or, you can install just the dplyr package by - # install.packages(&quot;dplyr&quot;) library(dplyr) However, if you want to install the development version, which I won’t recommend, you can follow the codes below - 0.2 Pipe operator %&gt;% It will be a crime not to introduce the pipe operator %&gt;% to you before starting with dplyr verbs. If you are familiar with the pipe operator | in bash scripting, that’s it. I have no better way to describe it to you. But, if you are not, then here is the thing for you - The pipe operator %&gt;% connects two operations on the same data (be it a vector or a data frame). It passes the output from the left-hand side operation of the pipe operator as the first argument to the right-hand side operation of the operator. If you want an informal definition - x %&gt;% f(y) is converted into f(x,y) by using the pipe operator. Let’s look at another example. If we have a vector x that holds value from 1 to 100 and we want to calculate the mean of x and make it round to an integer, we write in base R - x &lt;- 1:100 round(mean(x)) ## [1] 50 However, using the pipe operator, we can first define the x and then calculate the mean and, at the end, round it to an integer, like - x &lt;- 1:100 x %&gt;% mean %&gt;% round ## [1] 50 It goes from left to right as we think and build our data analysis pipeline. The new version of dplyr also supports |&gt; as the pipe operator, but I will stick to %&gt;% in the workshop. 0.3 dplyr verbs There are many verbs embedded in the dplyr package, here I will be discussing a few, but very important ones, that you will need to resolve most of the data manipulation challenges in your day-to-day life. 0.3.1 select() select() picks variables based on their names or types. For example - # using specific variable names - iris %&gt;% select(Sepal.Length, Sepal.Width) %&gt;% head() ## Sepal.Length Sepal.Width ## 1 5.1 3.5 ## 2 4.9 3.0 ## 3 4.7 3.2 ## 4 4.6 3.1 ## 5 5.0 3.6 ## 6 5.4 3.9 # using type - iris %&gt;% select(is.numeric) %&gt;% head() ## Warning: Use of bare predicate functions was deprecated in tidyselect 1.1.0. ## ℹ Please use wrap predicates in `where()` instead. ## # Was: ## data %&gt;% select(is.numeric) ## ## # Now: ## data %&gt;% select(where(is.numeric)) ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3.0 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5.0 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 With the verb select(), comes some selection helpers - If you want to select all the variables, you can use everything() iris %&gt;% select(everything()) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## 21 5.4 3.4 1.7 0.2 setosa ## 22 5.1 3.7 1.5 0.4 setosa ## 23 4.6 3.6 1.0 0.2 setosa ## 24 5.1 3.3 1.7 0.5 setosa ## 25 4.8 3.4 1.9 0.2 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 27 5.0 3.4 1.6 0.4 setosa ## 28 5.2 3.5 1.5 0.2 setosa ## 29 5.2 3.4 1.4 0.2 setosa ## 30 4.7 3.2 1.6 0.2 setosa ## 31 4.8 3.1 1.6 0.2 setosa ## 32 5.4 3.4 1.5 0.4 setosa ## 33 5.2 4.1 1.5 0.1 setosa ## 34 5.5 4.2 1.4 0.2 setosa ## 35 4.9 3.1 1.5 0.2 setosa ## 36 5.0 3.2 1.2 0.2 setosa ## 37 5.5 3.5 1.3 0.2 setosa ## 38 4.9 3.6 1.4 0.1 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 40 5.1 3.4 1.5 0.2 setosa ## 41 5.0 3.5 1.3 0.3 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 43 4.4 3.2 1.3 0.2 setosa ## 44 5.0 3.5 1.6 0.6 setosa ## 45 5.1 3.8 1.9 0.4 setosa ## 46 4.8 3.0 1.4 0.3 setosa ## 47 5.1 3.8 1.6 0.2 setosa ## 48 4.6 3.2 1.4 0.2 setosa ## 49 5.3 3.7 1.5 0.2 setosa ## 50 5.0 3.3 1.4 0.2 setosa ## 51 7.0 3.2 4.7 1.4 versicolor ## 52 6.4 3.2 4.5 1.5 versicolor ## 53 6.9 3.1 4.9 1.5 versicolor ## 54 5.5 2.3 4.0 1.3 versicolor ## 55 6.5 2.8 4.6 1.5 versicolor ## 56 5.7 2.8 4.5 1.3 versicolor ## 57 6.3 3.3 4.7 1.6 versicolor ## 58 4.9 2.4 3.3 1.0 versicolor ## 59 6.6 2.9 4.6 1.3 versicolor ## 60 5.2 2.7 3.9 1.4 versicolor ## 61 5.0 2.0 3.5 1.0 versicolor ## 62 5.9 3.0 4.2 1.5 versicolor ## 63 6.0 2.2 4.0 1.0 versicolor ## 64 6.1 2.9 4.7 1.4 versicolor ## 65 5.6 2.9 3.6 1.3 versicolor ## 66 6.7 3.1 4.4 1.4 versicolor ## 67 5.6 3.0 4.5 1.5 versicolor ## 68 5.8 2.7 4.1 1.0 versicolor ## 69 6.2 2.2 4.5 1.5 versicolor ## 70 5.6 2.5 3.9 1.1 versicolor ## 71 5.9 3.2 4.8 1.8 versicolor ## 72 6.1 2.8 4.0 1.3 versicolor ## 73 6.3 2.5 4.9 1.5 versicolor ## 74 6.1 2.8 4.7 1.2 versicolor ## 75 6.4 2.9 4.3 1.3 versicolor ## 76 6.6 3.0 4.4 1.4 versicolor ## 77 6.8 2.8 4.8 1.4 versicolor ## 78 6.7 3.0 5.0 1.7 versicolor ## 79 6.0 2.9 4.5 1.5 versicolor ## 80 5.7 2.6 3.5 1.0 versicolor ## 81 5.5 2.4 3.8 1.1 versicolor ## 82 5.5 2.4 3.7 1.0 versicolor ## 83 5.8 2.7 3.9 1.2 versicolor ## 84 6.0 2.7 5.1 1.6 versicolor ## 85 5.4 3.0 4.5 1.5 versicolor ## 86 6.0 3.4 4.5 1.6 versicolor ## 87 6.7 3.1 4.7 1.5 versicolor ## 88 6.3 2.3 4.4 1.3 versicolor ## 89 5.6 3.0 4.1 1.3 versicolor ## 90 5.5 2.5 4.0 1.3 versicolor ## 91 5.5 2.6 4.4 1.2 versicolor ## 92 6.1 3.0 4.6 1.4 versicolor ## 93 5.8 2.6 4.0 1.2 versicolor ## 94 5.0 2.3 3.3 1.0 versicolor ## 95 5.6 2.7 4.2 1.3 versicolor ## 96 5.7 3.0 4.2 1.2 versicolor ## 97 5.7 2.9 4.2 1.3 versicolor ## 98 6.2 2.9 4.3 1.3 versicolor ## 99 5.1 2.5 3.0 1.1 versicolor ## 100 5.7 2.8 4.1 1.3 versicolor ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica ## 121 6.9 3.2 5.7 2.3 virginica ## 122 5.6 2.8 4.9 2.0 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 124 6.3 2.7 4.9 1.8 virginica ## 125 6.7 3.3 5.7 2.1 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 127 6.2 2.8 4.8 1.8 virginica ## 128 6.1 3.0 4.9 1.8 virginica ## 129 6.4 2.8 5.6 2.1 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 133 6.4 2.8 5.6 2.2 virginica ## 134 6.3 2.8 5.1 1.5 virginica ## 135 6.1 2.6 5.6 1.4 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 137 6.3 3.4 5.6 2.4 virginica ## 138 6.4 3.1 5.5 1.8 virginica ## 139 6.0 3.0 4.8 1.8 virginica ## 140 6.9 3.1 5.4 2.1 virginica ## 141 6.7 3.1 5.6 2.4 virginica ## 142 6.9 3.1 5.1 2.3 virginica ## 143 5.8 2.7 5.1 1.9 virginica ## 144 6.8 3.2 5.9 2.3 virginica ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica You can choose the last column using last_col() or only columns that are grouped using group_cols() (You will understand better when I discuss the group_by() verb later). iris %&gt;% select(last_col()) %&gt;% head() ## Species ## 1 setosa ## 2 setosa ## 3 setosa ## 4 setosa ## 5 setosa ## 6 setosa iris %&gt;% group_by(Sepal.Length,Sepal.Width) %&gt;% select(group_cols()) %&gt;% head() ## # A tibble: 6 × 2 ## # Groups: Sepal.Length, Sepal.Width [6] ## Sepal.Length Sepal.Width ## &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 ## 2 4.9 3 ## 3 4.7 3.2 ## 4 4.6 3.1 ## 5 5 3.6 ## 6 5.4 3.9 If there’s a common prefix or suffix to some column names, you can utilise that by using selectio helpers starts_with() or ends_with(), respectively - iris %&gt;% select(starts_with(&quot;Sepal&quot;)) %&gt;% head() ## Sepal.Length Sepal.Width ## 1 5.1 3.5 ## 2 4.9 3.0 ## 3 4.7 3.2 ## 4 4.6 3.1 ## 5 5.0 3.6 ## 6 5.4 3.9 iris %&gt;% select(ends_with(&quot;Length&quot;)) %&gt;% head() ## Sepal.Length Petal.Length ## 1 5.1 1.4 ## 2 4.9 1.4 ## 3 4.7 1.3 ## 4 4.6 1.5 ## 5 5.0 1.4 ## 6 5.4 1.7 Even, an internal pattern can be used to select a column by using contains() - iris %&gt;% select(contains(&quot;dth&quot;)) %&gt;% head() ## Sepal.Width Petal.Width ## 1 3.5 0.2 ## 2 3.0 0.2 ## 3 3.2 0.2 ## 4 3.1 0.2 ## 5 3.6 0.2 ## 6 3.9 0.4 Even, you can use regular expression to select a column by using matches() - # column name containing either W or d or both iris %&gt;% select(matches(&quot;[Wd]&quot;)) %&gt;% head() ## Sepal.Width Petal.Width ## 1 3.5 0.2 ## 2 3.0 0.2 ## 3 3.2 0.2 ## 4 3.1 0.2 ## 5 3.6 0.2 ## 6 3.9 0.4 0.3.2 filter() The filter() verb is used to subset a data frame based on one or more conditions. Only the rows that satisfy the condition(s) remain and others filter out. There are some functions and operators that you should know while dealing with filter() verb - ==, &gt; or &lt;, &gt;= or &lt;= &amp;, |, ! is.na() %in% Let’s see some examples - # choose the rows whose Petal.Width is greater than 0.2 iris %&gt;% filter(Petal.Width &gt; 2) %&gt;% head() ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 6.3 3.3 6.0 2.5 virginica ## 2 7.1 3.0 5.9 2.1 virginica ## 3 6.5 3.0 5.8 2.2 virginica ## 4 7.6 3.0 6.6 2.1 virginica ## 5 7.2 3.6 6.1 2.5 virginica ## 6 6.8 3.0 5.5 2.1 virginica # choose the rows for setosa Species iris %&gt;% filter(Species == &quot;setosa&quot;) %&gt;% head() ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa #or iris %&gt;% filter(Species %in% &quot;setosa&quot;) %&gt;% head() ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa # or even the opposite is True iris %&gt;% filter(Species != &quot;setosa&quot;) %&gt;% head() ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 7.0 3.2 4.7 1.4 versicolor ## 2 6.4 3.2 4.5 1.5 versicolor ## 3 6.9 3.1 4.9 1.5 versicolor ## 4 5.5 2.3 4.0 1.3 versicolor ## 5 6.5 2.8 4.6 1.5 versicolor ## 6 5.7 2.8 4.5 1.3 versicolor 0.3.3 mutate() The verb mutate() creates new columns and often the element of the new col can be functions of the existing variables (i.e. columns). iris %&gt;% mutate(Length_difference = Sepal.Length - Petal.Length) # not that the new column here make much sense ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## 21 5.4 3.4 1.7 0.2 setosa ## 22 5.1 3.7 1.5 0.4 setosa ## 23 4.6 3.6 1.0 0.2 setosa ## 24 5.1 3.3 1.7 0.5 setosa ## 25 4.8 3.4 1.9 0.2 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 27 5.0 3.4 1.6 0.4 setosa ## 28 5.2 3.5 1.5 0.2 setosa ## 29 5.2 3.4 1.4 0.2 setosa ## 30 4.7 3.2 1.6 0.2 setosa ## 31 4.8 3.1 1.6 0.2 setosa ## 32 5.4 3.4 1.5 0.4 setosa ## 33 5.2 4.1 1.5 0.1 setosa ## 34 5.5 4.2 1.4 0.2 setosa ## 35 4.9 3.1 1.5 0.2 setosa ## 36 5.0 3.2 1.2 0.2 setosa ## 37 5.5 3.5 1.3 0.2 setosa ## 38 4.9 3.6 1.4 0.1 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 40 5.1 3.4 1.5 0.2 setosa ## 41 5.0 3.5 1.3 0.3 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 43 4.4 3.2 1.3 0.2 setosa ## 44 5.0 3.5 1.6 0.6 setosa ## 45 5.1 3.8 1.9 0.4 setosa ## 46 4.8 3.0 1.4 0.3 setosa ## 47 5.1 3.8 1.6 0.2 setosa ## 48 4.6 3.2 1.4 0.2 setosa ## 49 5.3 3.7 1.5 0.2 setosa ## 50 5.0 3.3 1.4 0.2 setosa ## 51 7.0 3.2 4.7 1.4 versicolor ## 52 6.4 3.2 4.5 1.5 versicolor ## 53 6.9 3.1 4.9 1.5 versicolor ## 54 5.5 2.3 4.0 1.3 versicolor ## 55 6.5 2.8 4.6 1.5 versicolor ## 56 5.7 2.8 4.5 1.3 versicolor ## 57 6.3 3.3 4.7 1.6 versicolor ## 58 4.9 2.4 3.3 1.0 versicolor ## 59 6.6 2.9 4.6 1.3 versicolor ## 60 5.2 2.7 3.9 1.4 versicolor ## 61 5.0 2.0 3.5 1.0 versicolor ## 62 5.9 3.0 4.2 1.5 versicolor ## 63 6.0 2.2 4.0 1.0 versicolor ## 64 6.1 2.9 4.7 1.4 versicolor ## 65 5.6 2.9 3.6 1.3 versicolor ## 66 6.7 3.1 4.4 1.4 versicolor ## 67 5.6 3.0 4.5 1.5 versicolor ## 68 5.8 2.7 4.1 1.0 versicolor ## 69 6.2 2.2 4.5 1.5 versicolor ## 70 5.6 2.5 3.9 1.1 versicolor ## 71 5.9 3.2 4.8 1.8 versicolor ## 72 6.1 2.8 4.0 1.3 versicolor ## 73 6.3 2.5 4.9 1.5 versicolor ## 74 6.1 2.8 4.7 1.2 versicolor ## 75 6.4 2.9 4.3 1.3 versicolor ## 76 6.6 3.0 4.4 1.4 versicolor ## 77 6.8 2.8 4.8 1.4 versicolor ## 78 6.7 3.0 5.0 1.7 versicolor ## 79 6.0 2.9 4.5 1.5 versicolor ## 80 5.7 2.6 3.5 1.0 versicolor ## 81 5.5 2.4 3.8 1.1 versicolor ## 82 5.5 2.4 3.7 1.0 versicolor ## 83 5.8 2.7 3.9 1.2 versicolor ## 84 6.0 2.7 5.1 1.6 versicolor ## 85 5.4 3.0 4.5 1.5 versicolor ## 86 6.0 3.4 4.5 1.6 versicolor ## 87 6.7 3.1 4.7 1.5 versicolor ## 88 6.3 2.3 4.4 1.3 versicolor ## 89 5.6 3.0 4.1 1.3 versicolor ## 90 5.5 2.5 4.0 1.3 versicolor ## 91 5.5 2.6 4.4 1.2 versicolor ## 92 6.1 3.0 4.6 1.4 versicolor ## 93 5.8 2.6 4.0 1.2 versicolor ## 94 5.0 2.3 3.3 1.0 versicolor ## 95 5.6 2.7 4.2 1.3 versicolor ## 96 5.7 3.0 4.2 1.2 versicolor ## 97 5.7 2.9 4.2 1.3 versicolor ## 98 6.2 2.9 4.3 1.3 versicolor ## 99 5.1 2.5 3.0 1.1 versicolor ## 100 5.7 2.8 4.1 1.3 versicolor ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica ## 121 6.9 3.2 5.7 2.3 virginica ## 122 5.6 2.8 4.9 2.0 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 124 6.3 2.7 4.9 1.8 virginica ## 125 6.7 3.3 5.7 2.1 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 127 6.2 2.8 4.8 1.8 virginica ## 128 6.1 3.0 4.9 1.8 virginica ## 129 6.4 2.8 5.6 2.1 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 133 6.4 2.8 5.6 2.2 virginica ## 134 6.3 2.8 5.1 1.5 virginica ## 135 6.1 2.6 5.6 1.4 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 137 6.3 3.4 5.6 2.4 virginica ## 138 6.4 3.1 5.5 1.8 virginica ## 139 6.0 3.0 4.8 1.8 virginica ## 140 6.9 3.1 5.4 2.1 virginica ## 141 6.7 3.1 5.6 2.4 virginica ## 142 6.9 3.1 5.1 2.3 virginica ## 143 5.8 2.7 5.1 1.9 virginica ## 144 6.8 3.2 5.9 2.3 virginica ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica ## Length_difference ## 1 3.7 ## 2 3.5 ## 3 3.4 ## 4 3.1 ## 5 3.6 ## 6 3.7 ## 7 3.2 ## 8 3.5 ## 9 3.0 ## 10 3.4 ## 11 3.9 ## 12 3.2 ## 13 3.4 ## 14 3.2 ## 15 4.6 ## 16 4.2 ## 17 4.1 ## 18 3.7 ## 19 4.0 ## 20 3.6 ## 21 3.7 ## 22 3.6 ## 23 3.6 ## 24 3.4 ## 25 2.9 ## 26 3.4 ## 27 3.4 ## 28 3.7 ## 29 3.8 ## 30 3.1 ## 31 3.2 ## 32 3.9 ## 33 3.7 ## 34 4.1 ## 35 3.4 ## 36 3.8 ## 37 4.2 ## 38 3.5 ## 39 3.1 ## 40 3.6 ## 41 3.7 ## 42 3.2 ## 43 3.1 ## 44 3.4 ## 45 3.2 ## 46 3.4 ## 47 3.5 ## 48 3.2 ## 49 3.8 ## 50 3.6 ## 51 2.3 ## 52 1.9 ## 53 2.0 ## 54 1.5 ## 55 1.9 ## 56 1.2 ## 57 1.6 ## 58 1.6 ## 59 2.0 ## 60 1.3 ## 61 1.5 ## 62 1.7 ## 63 2.0 ## 64 1.4 ## 65 2.0 ## 66 2.3 ## 67 1.1 ## 68 1.7 ## 69 1.7 ## 70 1.7 ## 71 1.1 ## 72 2.1 ## 73 1.4 ## 74 1.4 ## 75 2.1 ## 76 2.2 ## 77 2.0 ## 78 1.7 ## 79 1.5 ## 80 2.2 ## 81 1.7 ## 82 1.8 ## 83 1.9 ## 84 0.9 ## 85 0.9 ## 86 1.5 ## 87 2.0 ## 88 1.9 ## 89 1.5 ## 90 1.5 ## 91 1.1 ## 92 1.5 ## 93 1.8 ## 94 1.7 ## 95 1.4 ## 96 1.5 ## 97 1.5 ## 98 1.9 ## 99 2.1 ## 100 1.6 ## 101 0.3 ## 102 0.7 ## 103 1.2 ## 104 0.7 ## 105 0.7 ## 106 1.0 ## 107 0.4 ## 108 1.0 ## 109 0.9 ## 110 1.1 ## 111 1.4 ## 112 1.1 ## 113 1.3 ## 114 0.7 ## 115 0.7 ## 116 1.1 ## 117 1.0 ## 118 1.0 ## 119 0.8 ## 120 1.0 ## 121 1.2 ## 122 0.7 ## 123 1.0 ## 124 1.4 ## 125 1.0 ## 126 1.2 ## 127 1.4 ## 128 1.2 ## 129 0.8 ## 130 1.4 ## 131 1.3 ## 132 1.5 ## 133 0.8 ## 134 1.2 ## 135 0.5 ## 136 1.6 ## 137 0.7 ## 138 0.9 ## 139 1.2 ## 140 1.5 ## 141 1.1 ## 142 1.8 ## 143 0.7 ## 144 0.9 ## 145 1.0 ## 146 1.5 ## 147 1.3 ## 148 1.3 ## 149 0.8 ## 150 0.8 Interestingly, setting the value of an existing column to NULL inside mutate deletes the column. 0.3.4 rename() As the name suggests, rename() verb changes the name of an existing column. The syntax is &lt;new_name&gt; = &lt;old_name&gt;. Example - iris %&gt;% rename(Species.name=Species) %&gt;% head() ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species.name ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa Interestingly, you can change the name of a column while selecting using select() verb - iris %&gt;% select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species.name=Species) %&gt;% head() ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species.name ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa 0.3.5 arrange() The verb arrange() arranges or orders the rows of a data frame by the values of selected column(s), like - iris %&gt;% arrange(Sepal.Length) %&gt;% head() ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 4.3 3.0 1.1 0.1 setosa ## 2 4.4 2.9 1.4 0.2 setosa ## 3 4.4 3.0 1.3 0.2 setosa ## 4 4.4 3.2 1.3 0.2 setosa ## 5 4.5 2.3 1.3 0.3 setosa ## 6 4.6 3.1 1.5 0.2 setosa iris %&gt;% arrange(Sepal.Length,Sepal.Width) %&gt;% head() # After arranging the data frame by Sepal.Length, for a distinct Sepal.Length, the Sepal.Width is arrange and so as the rest of the data frame with it. ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 4.3 3.0 1.1 0.1 setosa ## 2 4.4 2.9 1.4 0.2 setosa ## 3 4.4 3.0 1.3 0.2 setosa ## 4 4.4 3.2 1.3 0.2 setosa ## 5 4.5 2.3 1.3 0.3 setosa ## 6 4.6 3.1 1.5 0.2 setosa 0.3.6 distinct() The distinct() verb retains only the unique/distinct rows from a data frame given the column(s) selected and only output the select column(s), if not the .keep_all parameter is change from it’s default value FALSE to TRUE. Let’s see some examples - iris %&gt;% distinct(Sepal.Length) %&gt;% head() ## Sepal.Length ## 1 5.1 ## 2 4.9 ## 3 4.7 ## 4 4.6 ## 5 5.0 ## 6 5.4 iris %&gt;% distinct(Sepal.Length,Sepal.Width) %&gt;% head() # here only the unique combinations of Sepal.Length and Sepal.Width are kept. ## Sepal.Length Sepal.Width ## 1 5.1 3.5 ## 2 4.9 3.0 ## 3 4.7 3.2 ## 4 4.6 3.1 ## 5 5.0 3.6 ## 6 5.4 3.9 iris %&gt;% distinct(Sepal.Length,Sepal.Width, .keep_all = T) %&gt;% head() # rest of the columns are also returned. ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa 0.3.7 slice() the slice() verb lets you index rows by their (integer) locations. It has some helpers too - slice_head() selects the first row, while slice_tail() selects the last. Same can be done using slice(1) and slice(n()) slice_head(&lt;int&gt;) selects from the first to the &lt;int&gt;th row, while slice_tail(&lt;int&gt;) selects from &lt;int&gt;th to the last row up to the end row. slice_sample() selects rows at random slice_min() and slice_max() helper selects rows with the lowest and the highest value of the selected variable. Few examples - iris %&gt;% slice(1) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa iris %&gt;% slice(10:n()) # you can do that too. ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 4.9 3.1 1.5 0.1 setosa ## 2 5.4 3.7 1.5 0.2 setosa ## 3 4.8 3.4 1.6 0.2 setosa ## 4 4.8 3.0 1.4 0.1 setosa ## 5 4.3 3.0 1.1 0.1 setosa ## 6 5.8 4.0 1.2 0.2 setosa ## 7 5.7 4.4 1.5 0.4 setosa ## 8 5.4 3.9 1.3 0.4 setosa ## 9 5.1 3.5 1.4 0.3 setosa ## 10 5.7 3.8 1.7 0.3 setosa ## 11 5.1 3.8 1.5 0.3 setosa ## 12 5.4 3.4 1.7 0.2 setosa ## 13 5.1 3.7 1.5 0.4 setosa ## 14 4.6 3.6 1.0 0.2 setosa ## 15 5.1 3.3 1.7 0.5 setosa ## 16 4.8 3.4 1.9 0.2 setosa ## 17 5.0 3.0 1.6 0.2 setosa ## 18 5.0 3.4 1.6 0.4 setosa ## 19 5.2 3.5 1.5 0.2 setosa ## 20 5.2 3.4 1.4 0.2 setosa ## 21 4.7 3.2 1.6 0.2 setosa ## 22 4.8 3.1 1.6 0.2 setosa ## 23 5.4 3.4 1.5 0.4 setosa ## 24 5.2 4.1 1.5 0.1 setosa ## 25 5.5 4.2 1.4 0.2 setosa ## 26 4.9 3.1 1.5 0.2 setosa ## 27 5.0 3.2 1.2 0.2 setosa ## 28 5.5 3.5 1.3 0.2 setosa ## 29 4.9 3.6 1.4 0.1 setosa ## 30 4.4 3.0 1.3 0.2 setosa ## 31 5.1 3.4 1.5 0.2 setosa ## 32 5.0 3.5 1.3 0.3 setosa ## 33 4.5 2.3 1.3 0.3 setosa ## 34 4.4 3.2 1.3 0.2 setosa ## 35 5.0 3.5 1.6 0.6 setosa ## 36 5.1 3.8 1.9 0.4 setosa ## 37 4.8 3.0 1.4 0.3 setosa ## 38 5.1 3.8 1.6 0.2 setosa ## 39 4.6 3.2 1.4 0.2 setosa ## 40 5.3 3.7 1.5 0.2 setosa ## 41 5.0 3.3 1.4 0.2 setosa ## 42 7.0 3.2 4.7 1.4 versicolor ## 43 6.4 3.2 4.5 1.5 versicolor ## 44 6.9 3.1 4.9 1.5 versicolor ## 45 5.5 2.3 4.0 1.3 versicolor ## 46 6.5 2.8 4.6 1.5 versicolor ## 47 5.7 2.8 4.5 1.3 versicolor ## 48 6.3 3.3 4.7 1.6 versicolor ## 49 4.9 2.4 3.3 1.0 versicolor ## 50 6.6 2.9 4.6 1.3 versicolor ## 51 5.2 2.7 3.9 1.4 versicolor ## 52 5.0 2.0 3.5 1.0 versicolor ## 53 5.9 3.0 4.2 1.5 versicolor ## 54 6.0 2.2 4.0 1.0 versicolor ## 55 6.1 2.9 4.7 1.4 versicolor ## 56 5.6 2.9 3.6 1.3 versicolor ## 57 6.7 3.1 4.4 1.4 versicolor ## 58 5.6 3.0 4.5 1.5 versicolor ## 59 5.8 2.7 4.1 1.0 versicolor ## 60 6.2 2.2 4.5 1.5 versicolor ## 61 5.6 2.5 3.9 1.1 versicolor ## 62 5.9 3.2 4.8 1.8 versicolor ## 63 6.1 2.8 4.0 1.3 versicolor ## 64 6.3 2.5 4.9 1.5 versicolor ## 65 6.1 2.8 4.7 1.2 versicolor ## 66 6.4 2.9 4.3 1.3 versicolor ## 67 6.6 3.0 4.4 1.4 versicolor ## 68 6.8 2.8 4.8 1.4 versicolor ## 69 6.7 3.0 5.0 1.7 versicolor ## 70 6.0 2.9 4.5 1.5 versicolor ## 71 5.7 2.6 3.5 1.0 versicolor ## 72 5.5 2.4 3.8 1.1 versicolor ## 73 5.5 2.4 3.7 1.0 versicolor ## 74 5.8 2.7 3.9 1.2 versicolor ## 75 6.0 2.7 5.1 1.6 versicolor ## 76 5.4 3.0 4.5 1.5 versicolor ## 77 6.0 3.4 4.5 1.6 versicolor ## 78 6.7 3.1 4.7 1.5 versicolor ## 79 6.3 2.3 4.4 1.3 versicolor ## 80 5.6 3.0 4.1 1.3 versicolor ## 81 5.5 2.5 4.0 1.3 versicolor ## 82 5.5 2.6 4.4 1.2 versicolor ## 83 6.1 3.0 4.6 1.4 versicolor ## 84 5.8 2.6 4.0 1.2 versicolor ## 85 5.0 2.3 3.3 1.0 versicolor ## 86 5.6 2.7 4.2 1.3 versicolor ## 87 5.7 3.0 4.2 1.2 versicolor ## 88 5.7 2.9 4.2 1.3 versicolor ## 89 6.2 2.9 4.3 1.3 versicolor ## 90 5.1 2.5 3.0 1.1 versicolor ## 91 5.7 2.8 4.1 1.3 versicolor ## 92 6.3 3.3 6.0 2.5 virginica ## 93 5.8 2.7 5.1 1.9 virginica ## 94 7.1 3.0 5.9 2.1 virginica ## 95 6.3 2.9 5.6 1.8 virginica ## 96 6.5 3.0 5.8 2.2 virginica ## 97 7.6 3.0 6.6 2.1 virginica ## 98 4.9 2.5 4.5 1.7 virginica ## 99 7.3 2.9 6.3 1.8 virginica ## 100 6.7 2.5 5.8 1.8 virginica ## 101 7.2 3.6 6.1 2.5 virginica ## 102 6.5 3.2 5.1 2.0 virginica ## 103 6.4 2.7 5.3 1.9 virginica ## 104 6.8 3.0 5.5 2.1 virginica ## 105 5.7 2.5 5.0 2.0 virginica ## 106 5.8 2.8 5.1 2.4 virginica ## 107 6.4 3.2 5.3 2.3 virginica ## 108 6.5 3.0 5.5 1.8 virginica ## 109 7.7 3.8 6.7 2.2 virginica ## 110 7.7 2.6 6.9 2.3 virginica ## 111 6.0 2.2 5.0 1.5 virginica ## 112 6.9 3.2 5.7 2.3 virginica ## 113 5.6 2.8 4.9 2.0 virginica ## 114 7.7 2.8 6.7 2.0 virginica ## 115 6.3 2.7 4.9 1.8 virginica ## 116 6.7 3.3 5.7 2.1 virginica ## 117 7.2 3.2 6.0 1.8 virginica ## 118 6.2 2.8 4.8 1.8 virginica ## 119 6.1 3.0 4.9 1.8 virginica ## 120 6.4 2.8 5.6 2.1 virginica ## 121 7.2 3.0 5.8 1.6 virginica ## 122 7.4 2.8 6.1 1.9 virginica ## 123 7.9 3.8 6.4 2.0 virginica ## 124 6.4 2.8 5.6 2.2 virginica ## 125 6.3 2.8 5.1 1.5 virginica ## 126 6.1 2.6 5.6 1.4 virginica ## 127 7.7 3.0 6.1 2.3 virginica ## 128 6.3 3.4 5.6 2.4 virginica ## 129 6.4 3.1 5.5 1.8 virginica ## 130 6.0 3.0 4.8 1.8 virginica ## 131 6.9 3.1 5.4 2.1 virginica ## 132 6.7 3.1 5.6 2.4 virginica ## 133 6.9 3.1 5.1 2.3 virginica ## 134 5.8 2.7 5.1 1.9 virginica ## 135 6.8 3.2 5.9 2.3 virginica ## 136 6.7 3.3 5.7 2.5 virginica ## 137 6.7 3.0 5.2 2.3 virginica ## 138 6.3 2.5 5.0 1.9 virginica ## 139 6.5 3.0 5.2 2.0 virginica ## 140 6.2 3.4 5.4 2.3 virginica ## 141 5.9 3.0 5.1 1.8 virginica iris %&gt;% slice_min( Sepal.Length) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 4.3 3 1.1 0.1 setosa 0.3.8 join A disclaimer, there’s no verb called join() in dplyr (at least, to date). However, there are two types of join verbs - inner_join() and outer_join (which is also not a verb, but a class of three verbs: left_join(), right_join() and full_join()). join verbs joins columns from two data frames based on a common key column. inner_join() verb joins two data frame and retains the rows where the keys match. This means that there is a potential loss of observations that we may not appreciate in the real-life analysis. On the other hand, if we have two data frames x and y, the left_join() verb matches the keys from x and y, while keeps all the rows from x and joins the matched rows from y. The empty cells are filled with NA values. For right_join() verb, is the opposite scenario. On the other hand, the full_join() verb retains all the rows from both data frames and empty cells are filled with NA values. Let’s clear the concept with some examples - x &lt;- iris %&gt;% select(Sepal.Length,Sepal.Width,Species) %&gt;% filter(Species %in% c(&quot;setosa&quot;, &quot;versicolor&quot;)) %&gt;% slice_sample(n=10) y &lt;- iris %&gt;% select(Petal.Length,Petal.Width,Species) %&gt;% filter(Species %in% c(&quot;versicolor&quot;, &quot;virginica&quot;)) %&gt;% slice_sample(n=10) x %&gt;% inner_join(y, by = &quot;Species&quot;) ## Warning in inner_join(., y, by = &quot;Species&quot;): Detected an unexpected many-to-many relationship between `x` and `y`. ## ℹ Row 1 of `x` matches multiple rows in `y`. ## ℹ Row 1 of `y` matches multiple rows in `x`. ## ℹ If a many-to-many relationship is expected, set `relationship = ## &quot;many-to-many&quot;` to silence this warning. ## Sepal.Length Sepal.Width Species Petal.Length Petal.Width ## 1 6.4 2.9 versicolor 4.1 1.3 ## 2 6.4 2.9 versicolor 3.7 1.0 ## 3 6.4 2.9 versicolor 4.5 1.5 ## 4 6.4 2.9 versicolor 4.2 1.2 ## 5 5.6 2.5 versicolor 4.1 1.3 ## 6 5.6 2.5 versicolor 3.7 1.0 ## 7 5.6 2.5 versicolor 4.5 1.5 ## 8 5.6 2.5 versicolor 4.2 1.2 ## 9 6.7 3.1 versicolor 4.1 1.3 ## 10 6.7 3.1 versicolor 3.7 1.0 ## 11 6.7 3.1 versicolor 4.5 1.5 ## 12 6.7 3.1 versicolor 4.2 1.2 ## 13 7.0 3.2 versicolor 4.1 1.3 ## 14 7.0 3.2 versicolor 3.7 1.0 ## 15 7.0 3.2 versicolor 4.5 1.5 ## 16 7.0 3.2 versicolor 4.2 1.2 x %&gt;% left_join(y, by = &quot;Species&quot;) ## Warning in left_join(., y, by = &quot;Species&quot;): Detected an unexpected many-to-many relationship between `x` and `y`. ## ℹ Row 1 of `x` matches multiple rows in `y`. ## ℹ Row 1 of `y` matches multiple rows in `x`. ## ℹ If a many-to-many relationship is expected, set `relationship = ## &quot;many-to-many&quot;` to silence this warning. ## Sepal.Length Sepal.Width Species Petal.Length Petal.Width ## 1 6.4 2.9 versicolor 4.1 1.3 ## 2 6.4 2.9 versicolor 3.7 1.0 ## 3 6.4 2.9 versicolor 4.5 1.5 ## 4 6.4 2.9 versicolor 4.2 1.2 ## 5 5.0 3.4 setosa NA NA ## 6 5.2 4.1 setosa NA NA ## 7 5.7 3.8 setosa NA NA ## 8 5.6 2.5 versicolor 4.1 1.3 ## 9 5.6 2.5 versicolor 3.7 1.0 ## 10 5.6 2.5 versicolor 4.5 1.5 ## 11 5.6 2.5 versicolor 4.2 1.2 ## 12 4.8 3.1 setosa NA NA ## 13 6.7 3.1 versicolor 4.1 1.3 ## 14 6.7 3.1 versicolor 3.7 1.0 ## 15 6.7 3.1 versicolor 4.5 1.5 ## 16 6.7 3.1 versicolor 4.2 1.2 ## 17 5.7 4.4 setosa NA NA ## 18 4.6 3.6 setosa NA NA ## 19 7.0 3.2 versicolor 4.1 1.3 ## 20 7.0 3.2 versicolor 3.7 1.0 ## 21 7.0 3.2 versicolor 4.5 1.5 ## 22 7.0 3.2 versicolor 4.2 1.2 x %&gt;% right_join(y, by = &quot;Species&quot;) ## Warning in right_join(., y, by = &quot;Species&quot;): Detected an unexpected many-to-many relationship between `x` and `y`. ## ℹ Row 1 of `x` matches multiple rows in `y`. ## ℹ Row 1 of `y` matches multiple rows in `x`. ## ℹ If a many-to-many relationship is expected, set `relationship = ## &quot;many-to-many&quot;` to silence this warning. ## Sepal.Length Sepal.Width Species Petal.Length Petal.Width ## 1 6.4 2.9 versicolor 4.1 1.3 ## 2 6.4 2.9 versicolor 3.7 1.0 ## 3 6.4 2.9 versicolor 4.5 1.5 ## 4 6.4 2.9 versicolor 4.2 1.2 ## 5 5.6 2.5 versicolor 4.1 1.3 ## 6 5.6 2.5 versicolor 3.7 1.0 ## 7 5.6 2.5 versicolor 4.5 1.5 ## 8 5.6 2.5 versicolor 4.2 1.2 ## 9 6.7 3.1 versicolor 4.1 1.3 ## 10 6.7 3.1 versicolor 3.7 1.0 ## 11 6.7 3.1 versicolor 4.5 1.5 ## 12 6.7 3.1 versicolor 4.2 1.2 ## 13 7.0 3.2 versicolor 4.1 1.3 ## 14 7.0 3.2 versicolor 3.7 1.0 ## 15 7.0 3.2 versicolor 4.5 1.5 ## 16 7.0 3.2 versicolor 4.2 1.2 ## 17 NA NA virginica 4.9 1.8 ## 18 NA NA virginica 5.3 2.3 ## 19 NA NA virginica 5.7 2.5 ## 20 NA NA virginica 6.9 2.3 ## 21 NA NA virginica 5.8 1.8 ## 22 NA NA virginica 5.1 2.0 x %&gt;% full_join(y, by = &quot;Species&quot;) ## Warning in full_join(., y, by = &quot;Species&quot;): Detected an unexpected many-to-many relationship between `x` and `y`. ## ℹ Row 1 of `x` matches multiple rows in `y`. ## ℹ Row 1 of `y` matches multiple rows in `x`. ## ℹ If a many-to-many relationship is expected, set `relationship = ## &quot;many-to-many&quot;` to silence this warning. ## Sepal.Length Sepal.Width Species Petal.Length Petal.Width ## 1 6.4 2.9 versicolor 4.1 1.3 ## 2 6.4 2.9 versicolor 3.7 1.0 ## 3 6.4 2.9 versicolor 4.5 1.5 ## 4 6.4 2.9 versicolor 4.2 1.2 ## 5 5.0 3.4 setosa NA NA ## 6 5.2 4.1 setosa NA NA ## 7 5.7 3.8 setosa NA NA ## 8 5.6 2.5 versicolor 4.1 1.3 ## 9 5.6 2.5 versicolor 3.7 1.0 ## 10 5.6 2.5 versicolor 4.5 1.5 ## 11 5.6 2.5 versicolor 4.2 1.2 ## 12 4.8 3.1 setosa NA NA ## 13 6.7 3.1 versicolor 4.1 1.3 ## 14 6.7 3.1 versicolor 3.7 1.0 ## 15 6.7 3.1 versicolor 4.5 1.5 ## 16 6.7 3.1 versicolor 4.2 1.2 ## 17 5.7 4.4 setosa NA NA ## 18 4.6 3.6 setosa NA NA ## 19 7.0 3.2 versicolor 4.1 1.3 ## 20 7.0 3.2 versicolor 3.7 1.0 ## 21 7.0 3.2 versicolor 4.5 1.5 ## 22 7.0 3.2 versicolor 4.2 1.2 ## 23 NA NA virginica 4.9 1.8 ## 24 NA NA virginica 5.3 2.3 ## 25 NA NA virginica 5.7 2.5 ## 26 NA NA virginica 6.9 2.3 ## 27 NA NA virginica 5.8 1.8 ## 28 NA NA virginica 5.1 2.0 0.3.9 group_by() and summarise() I will be describing group_by() and summarise() verbs together to show the effect of the former. group_by() is the most importsnt grouping verb in dplyr. It takes one or more variables of the data frame to group by - iris %&gt;% group_by(Species) %&gt;% head() ## # A tibble: 6 × 5 ## # Groups: Species [1] ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa Rather than some metadata, you don’t see any change in the structure of the iris data frame yet. Let’s select Sepal.Length and see the effect - iris %&gt;% group_by(Species) %&gt;% select(Sepal.Length) %&gt;% head() ## Adding missing grouping variables: `Species` ## # A tibble: 6 × 2 ## # Groups: Species [1] ## Species Sepal.Length ## &lt;fct&gt; &lt;dbl&gt; ## 1 setosa 5.1 ## 2 setosa 4.9 ## 3 setosa 4.7 ## 4 setosa 4.6 ## 5 setosa 5 ## 6 setosa 5.4 Though I selected only the Sepal.Length, the Species column also appears. Yes, that’s because of the application group_by() verb beforehand. But the most dramatic effect can be seen in conjunction with the summarise() verb. summarise() generates a new data frame and returns one row (with the result of course) for each combination of grouping variables. In the case of no grouping variables, the output has a single row summarising all observations in the input. Now, let’s see the effect of group_by() in conjunction with summarise() verb - iris %&gt;% group_by(Species) %&gt;% select(Sepal.Length) %&gt;% summarise(count=n()) ## Adding missing grouping variables: `Species` ## # A tibble: 3 × 2 ## Species count ## &lt;fct&gt; &lt;int&gt; ## 1 setosa 50 ## 2 versicolor 50 ## 3 virginica 50 iris %&gt;% group_by(Species) %&gt;% select(Sepal.Length) %&gt;% summarise(mean_Sepal_length=mean(Sepal.Length)) ## Adding missing grouping variables: `Species` ## # A tibble: 3 × 2 ## Species mean_Sepal_length ## &lt;fct&gt; &lt;dbl&gt; ## 1 setosa 5.01 ## 2 versicolor 5.94 ## 3 virginica 6.59 # as being told, without any grouping - iris %&gt;% select(Sepal.Length) %&gt;% summarise(mean_Sepal_length=mean(Sepal.Length)) ## mean_Sepal_length ## 1 5.843333 "],["plotting-using-ggplot2.html", "Plotting using ggplot2 0.4 Mini intro to ggplot2", " Plotting using ggplot2 0.4 Mini intro to ggplot2 To my opinion, the most elegant package for data visualisation in R is ggplot2. Here, gg stands for the grammar of graphics. Put aside what you have learnt so far on basic R plotting techniques, ggplot2 defines the art of plotting in a whole new way. The learning curve may be steep, but once you learn it, you will fall in love with it (I promise). You provide the data, tell ggplot2 which variables to map to the aesthetics, and tell what do you want. ggplot2 will take care of the rest. 0.4.1 Installation The easiest way to get ggplot2 is to install the whole tidyverse: #install.packages(&quot;tidyverse&quot;) Alternatively, install just ggplot2: #install.packages(&quot;ggplot2&quot;) Or the the development version from GitHub: #install.packages(&quot;devtools&quot;) #devtools::install_github(&quot;tidyverse/ggplot2&quot;) And then, load it … library(ggplot2) 0.4.2 Plotting with ggplot2 In this chapter, I will bwe using the mtcars dataset for plotting different graphs. For refreshing your memory, let’s have a look at the dataset - head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 str(mtcars) ## &#39;data.frame&#39;: 32 obs. of 11 variables: ## $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... ## $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... ## $ disp: num 160 160 108 258 360 ... ## $ hp : num 110 110 93 110 175 105 245 62 95 123 ... ## $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... ## $ wt : num 2.62 2.88 2.32 3.21 3.44 ... ## $ qsec: num 16.5 17 18.6 19.4 17 ... ## $ vs : num 0 0 1 1 0 1 0 1 1 1 ... ## $ am : num 1 1 1 0 0 0 0 0 0 0 ... ## $ gear: num 4 4 4 3 3 3 3 4 4 4 ... ## $ carb: num 4 4 1 1 2 1 4 2 2 4 ... Now, I will draw scatter plot using the base R plot() function, and then using ggplot2, I will show you the difference - plot(x=mtcars$mpg, y=mtcars$wt) ggplot(data = mtcars, mapping = aes(x=mpg,y=wt)) + geom_point() You can see the stark difference between them - 0.4.2.1 General parameters for ggplot() For plotting with ggplot2, you start with ggplot() function and you privide the data. You then put the parameters you need to plot, like - the aesthetic mapping using mapping = aes(). Then, you add on layers (like geom_point()), scale (like scale_x_continuous()), faceting specifications (like facet_wrap()), coordinate systems (like coord_flip()) In short, these are the elements that you might see in a block of graph using ggplot() function - data aesthetic mapping geometric objects statistical transformations scales coordinate systems position adjustments faceting You can specify different layers of the plot and combine using “+” operator. Now I will dive into different aspects of the ggplot() function - 0.4.2.1.1 Aesthetic mapping using aes() Here aesthetic means something that you can see. It is mainly the mapping between a visual attribute and a variable. These are some important aesthetics - position (x,y) colour (basically the colour of the outer rim of the object) fill (the filling-colour/inside-colour of the object) shape (mainly of point) line type size etc You can read all about them on your Rstudio help panel by typing - help.search(&quot;geom_&quot;, package = &quot;ggplot2&quot;) 0.4.2.1.2 Geomatric Objects `geom_ There are so many geomes in ggplot2, like - geom_point() geom_lines() geom_boxplot() Again, you can find the geoms by typing in - help.search(&quot;geom_&quot;, package = &quot;ggplot2&quot;) Now time to check what I have just mentioned, but before that (as usual) let’s check the data that we are going to use. I will switch to another dataset, called mpg, from R. ?mpg 0.4.2.1.3 scatter plot with geom_point() I will now draw a scatter plot using highway miles per gallon as a function of engine displacement (in litres) - ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point() Interestingly, you can save the whole or part of the code snippet in a variable - # can be saved in a vector first, then print it. Like - p1 &lt;- ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point() p1 # or p &lt;- ggplot(data=mpg, aes(x=displ, y=hwy)) # saved as a base plot variable. I will call p and add different layer on it. p2 &lt;- p + geom_point() p3 &lt;- p + geom_line() p4 &lt;- p + geom_smooth() p5 &lt;- p2 + geom_smooth(se = F, linetype=&quot;dashed&quot;) p5 ## `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39; Now let’s play with colour and size - p + geom_point(colour=&quot;red&quot;, alpha = 0.2, size = 3) # outside aes(), affects the same for all p + geom_point(aes(colour=year, shape=factor(cyl)), size = 3) # inside aes(), affects accordingly You can play with title and axis labels - p + geom_point(aes(colour=year), size = 3, alpha = 0.2) + #geom_text(aes(label=model)) + # may be not a good idea now. labs( title = &quot;Fuel efficiency vs Engine displacement&quot;, subtitle = &quot;Fuel efficiency decreases with the engine size&quot;, caption = &quot;Two-seater is an exception&quot;, x = &quot;Engine displacement (L)&quot;, y = &quot;Highway fule economy (mpg)&quot;, colour = &quot;Manufactrure year&quot; ) If your datapoints are a bit tightly spaced, you can jitter a bit - p + geom_point(aes(colour=class), size = 3, position = &quot;jitter&quot;) # introducing jitter here. For controlling the amount of movements, you can use geom_jitter() Let’s play with some scaling - p + geom_point(aes(colour=class), size = 3, alpha = 0.2) + scale_x_continuous(name = &quot;x-axis label changed&quot;, breaks = seq(0,10,by=5),limits = c(0,10)) + scale_y_continuous(trans = &quot;reverse&quot;) p + geom_point(aes(colour=class), size = 3, alpha = 0.2) + scale_colour_brewer(palette = &quot;Set1&quot;) # scale_colour is a widely used one You can play with the positioning of the legend, too - p + geom_point(aes(colour=class), size = 3, alpha = 0.2) + theme(legend.position = &quot;left&quot;) p + geom_point(aes(colour=class), size = 3, alpha = 0.2) + theme(legend.position = &quot;none&quot;) 0.4.2.1.4 Faceting If you have too many data points, the idea of faceting is to sub-setting the plot by an appropriate variable - p + geom_point(aes(colour=class), size = 3, alpha = 0.2) + facet_wrap(~ class, ncol = 2) p + geom_point(aes(colour=class), size = 3, alpha = 0.2) + facet_grid(~ class) # if there were any blank plot, won&#39;t be plotted here 0.4.2.1.5 Theme There are different themes to play with - p + geom_point(aes(colour=class), size = 3, alpha = 0.2) + theme_void() 0.4.2.2 Bar plot and position adjustment. By default, the bar plot comes as stacked. If you fill it by a variable that is not used to plot the bars, you can see what I mean. However, for playing with the bar plot, I will be using another dataset called ‘diamonds’ that comes with R. To begin with - ggplot(data=diamonds) + geom_bar(mapping = aes(x=cut)) ggplot(data=diamonds) + geom_bar(mapping = aes(x=cut, fill=cut)) But - ggplot(data=diamonds) + geom_bar(mapping = aes(x=cut, fill=clarity)) The position is adjusted by the position argument which takes in three options - “identity”, “fill”, and “dodge” ggplot(data=diamonds) + geom_bar(mapping = aes(x=cut, fill=clarity), position = &quot;identity&quot;) Here, each object falls exactly where it should be in the context of the plot and seems to be overlapped. It can be a little better if you use fill = NA or use alpha value ggplot(data=diamonds) + geom_bar(mapping = aes(x=cut, fill=clarity), position = &quot;identity&quot;, alpha = 0.2) ggplot(data=diamonds) + geom_bar(mapping = aes(x=cut, colour=clarity), position = &quot;identity&quot;, fill=NA) # mind the change of colour and fill Position fill catches up all the space vertically for each bar and displays as fraction of the values ggplot(data=diamonds) + geom_bar(mapping = aes(x=cut, fill=clarity), position = &quot;fill&quot;) But what we usually mean by the bar plots is the next - ggplot(data=diamonds) + geom_bar(mapping = aes(x=cut, fill=clarity), position = &quot;dodge&quot;) 0.4.2.3 Coordinate system Let’s cover it with box plots. ggplot(mpg, aes(class, hwy)) + geom_boxplot() + coord_flip() ggplot(mpg, aes(class, hwy)) + geom_boxplot() + coord_polar() # Please don&#39;t plot boxplot in this way in real-life. 0.4.3 The rest of the exercise is a copy of the “Top 50 ggplot2 Visualizations - The Master List (With Full R Code)”. The link: http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html Correlation The following plots help to examine how well correlated two variables are. Scatterplot The most frequently used plot for data analysis is undoubtedly the scatterplot. Whenever you want to understand the nature of relationship between two variables, invariably the first choice is the scatterplot. It can be drawn using geom_point(). Additionally, geom_smooth which draws a smoothing line (based on loess) by default, can be tweaked to draw the line of best fit by setting method=‘lm’. # install.packages(&quot;ggplot2&quot;) # load package and data options(scipen=999) # turn-off scientific notation like 1e+48 library(ggplot2) theme_set(theme_bw()) # pre-set the bw theme. data(&quot;midwest&quot;, package = &quot;ggplot2&quot;) # midwest &lt;- read.csv(&quot;http://goo.gl/G1K41K&quot;) # bkup data source # Scatterplot gg &lt;- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point(aes(col=state, size=popdensity)) + geom_smooth(method=&quot;loess&quot;, se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) + labs(subtitle=&quot;Area Vs Population&quot;, y=&quot;Population&quot;, x=&quot;Area&quot;, title=&quot;Scatterplot&quot;, caption = &quot;Source: midwest&quot;) plot(gg) ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## Warning: Removed 15 rows containing non-finite values (`stat_smooth()`). ## Warning: Removed 15 rows containing missing values (`geom_point()`). References: https://r4ds.had.co.nz/data-visualisation.html https://ggplot2.tidyverse.org/ https://r4ds.had.co.nz/graphics-for-communication.html http://r-statistics.co/ggplot2-Tutorial-With-R.html http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html https://beanumber.github.io/sds192/lab-ggplot2.html "],["metabric-data-analysis.html", "Metabric data analysis", " Metabric data analysis Now it’s our turn to apply the techniques that we have learned so far in this workshop. In this section, we will explore some datasets that were part of a study characterising the genomic mutations (SNVs and CNAs) and gene expression profiles for over 2000 primary breast tumours. In addition, a detailed clinical information can also be found for this study alongside the experimental data from cBioPortal. The study was published under two prominent publications - Curtis et al., Nature 486:346-52, 2012 Pereira et al., Nature Communications 7:11479, 2016 FYI, the gene expression data generated using microarrays, genome-wide copy number profiles were obtained using SNP microarrays and targeted sequencing was performed using a panel of 40 driver-mutation genes to detect mutations (single nucleotide variants). Let’s download the data and save it in the workshop2 folder. We will be plotting different aspects of the patient related information and biological aspect for the sake of exploratory data analysis (EDA). And for that, we will have to merge and format the data provided. Now, let’s load the data one by one using the function read.delim with appropriate parameters - library(dplyr) library(ggplot2) # Load patient data and explore a few of the columns (e.g. BREAST_SURGERY, CELLULARITY,CHEMOTHERAPY, ER_IHC ) - patient_data &lt;- read.delim(&quot;/Users/mahedi/Documents/Collaborations/UCL_CI/metabric/brca_metabric/data_clinical_patient.txt&quot;,comment.char = &quot;#&quot;, sep = &quot;\\t&quot;) patient_data %&gt;% pull(BREAST_SURGERY) %&gt;% table ## . ## BREAST CONSERVING MASTECTOMY ## 554 785 1170 patient_data %&gt;% pull(CELLULARITY) %&gt;% table ## . ## High Low Moderate ## 592 965 215 737 patient_data %&gt;% pull(CHEMOTHERAPY) %&gt;% table ## . ## NO YES ## 529 1568 412 patient_data %&gt;% pull(ER_IHC) %&gt;% table ## . ## Negative Positve ## 83 609 1817 # Load sample data and explore the ER_STATUS sample_data &lt;- read.delim(&quot;/Users/mahedi/Documents/Collaborations/UCL_CI/metabric/brca_metabric/data_clinical_sample.txt&quot;,comment.char = &quot;#&quot;, sep = &quot;\\t&quot;) sample_data %&gt;% pull(ER_STATUS) %&gt;% table ## . ## Negative Positive ## 644 1825 # Load CNA data and explore CNA_data &lt;- read.table(&quot;/Users/mahedi/Documents/Collaborations/UCL_CI/metabric/brca_metabric/data_cna.txt&quot;,header = T, sep = &quot;\\t&quot;) %&gt;% select(-Entrez_Gene_Id) %&gt;% distinct(Hugo_Symbol, .keep_all = T) CNA_data[1:10, 1:10] ## Hugo_Symbol MB.0000 MB.0039 MB.0045 MB.0046 MB.0048 MB.0050 MB.0053 MB.0062 ## 1 A1BG 0 0 -1 0 0 0 0 -1 ## 2 A1BG-AS1 0 0 -1 0 0 0 0 -1 ## 3 A1CF 0 0 0 0 1 0 0 0 ## 4 A2M 0 0 -1 -1 0 0 0 2 ## 5 A2M-AS1 0 0 -1 -1 0 0 0 2 ## 6 A2ML1 0 0 -1 -1 0 0 0 2 ## 7 A2MP1 0 0 -1 -1 0 0 0 2 ## 8 A3GALT2 0 0 0 0 0 0 0 -1 ## 9 A4GALT 0 0 0 -1 -1 -1 0 1 ## 10 A4GNT 0 0 2 0 0 0 1 1 ## MB.0064 ## 1 0 ## 2 0 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 # Load mutation data and explore mutation_data &lt;- read.delim(&quot;/Users/mahedi/Documents/Collaborations/UCL_CI/metabric/brca_metabric/data_mutations.txt&quot;,comment.char = &quot;#&quot;, sep = &quot;\\t&quot;) mutation_data %&gt;% head() ## Hugo_Symbol Entrez_Gene_Id Center NCBI_Build Chromosome Start_Position ## 1 TP53 NA METABRIC GRCh37 17 7579344 ## 2 TP53 NA METABRIC GRCh37 17 7579346 ## 3 MLLT4 NA METABRIC GRCh37 6 168299111 ## 4 NF2 NA METABRIC GRCh37 22 29999995 ## 5 SF3B1 NA METABRIC GRCh37 2 198288682 ## 6 NT5E NA METABRIC GRCh37 6 86195125 ## End_Position Strand Consequence Variant_Classification ## 1 7579345 + frameshift_variant Frame_Shift_Ins ## 2 7579347 + protein_altering_variant In_Frame_Ins ## 3 168299111 + missense_variant Missense_Mutation ## 4 29999995 + missense_variant Missense_Mutation ## 5 198288682 + synonymous_variant Silent ## 6 86195125 + synonymous_variant Silent ## Variant_Type Reference_Allele Tumor_Seq_Allele1 Tumor_Seq_Allele2 dbSNP_RS ## 1 INS - - G NA ## 2 INS - - CAG NA ## 3 SNP G G T NA ## 4 SNP G G T NA ## 5 SNP A A T NA ## 6 SNP T T C NA ## dbSNP_Val_Status Tumor_Sample_Barcode Matched_Norm_Sample_Barcode ## 1 NA MTS-T0058 NA ## 2 NA MTS-T0058 NA ## 3 NA MTS-T0058 NA ## 4 NA MTS-T0058 NA ## 5 NA MTS-T0059 NA ## 6 NA MTS-T0059 NA ## Match_Norm_Seq_Allele1 Match_Norm_Seq_Allele2 Tumor_Validation_Allele1 ## 1 NA NA NA ## 2 NA NA NA ## 3 NA NA NA ## 4 NA NA NA ## 5 NA NA NA ## 6 NA NA NA ## Tumor_Validation_Allele2 Match_Norm_Validation_Allele1 ## 1 NA NA ## 2 NA NA ## 3 NA NA ## 4 NA NA ## 5 NA NA ## 6 NA NA ## Match_Norm_Validation_Allele2 Verification_Status Validation_Status ## 1 NA NA NA ## 2 NA NA NA ## 3 NA NA NA ## 4 NA NA NA ## 5 NA NA NA ## 6 NA NA NA ## Mutation_Status Sequencing_Phase Sequence_Source Validation_Method Score ## 1 NA NA NA NA NA ## 2 NA NA NA NA NA ## 3 NA NA NA NA NA ## 4 NA NA NA NA NA ## 5 NA NA NA NA NA ## 6 NA NA NA NA NA ## BAM_File Sequencer t_ref_count t_alt_count n_ref_count n_alt_count ## 1 NA Illumina HiSeq 2,000 NA NA NA NA ## 2 NA Illumina HiSeq 2,000 NA NA NA NA ## 3 NA Illumina HiSeq 2,000 NA NA NA NA ## 4 NA Illumina HiSeq 2,000 NA NA NA NA ## 5 NA Illumina HiSeq 2,000 NA NA NA NA ## 6 NA Illumina HiSeq 2,000 NA NA NA NA ## HGVSc HGVSp HGVSp_Short ## 1 ENST00000269305.4:c.343dup p.His115ProfsTer34 p.H115Pfs*34 ## 2 ENST00000269305.4:c.340_341insCTG p.Leu114delinsSerVal p.L114delinsSV ## 3 ENST00000392108.3:c.1544G&gt;T p.Gly515Val p.G515V ## 4 ENST00000338641.4:c.8G&gt;T p.Gly3Val p.G3V ## 5 ENST00000335508.6:c.45T&gt;A p.Ile15= p.I15= ## 6 ENST00000257770.3:c.924T&gt;C p.Ile308= p.I308= ## Transcript_ID RefSeq Protein_position Codons Hotspot ## 1 ENST00000269305 NM_001126112.2 114 -/C 0 ## 2 ENST00000269305 NM_001126112.2 114 ttg/tCTGtg 0 ## 3 ENST00000392108 NM_001040000.2 515 gGa/gTa 0 ## 4 ENST00000338641 NM_000268.3 3 gGg/gTg 0 ## 5 ENST00000335508 NM_012433.2 15 atT/atA 0 ## 6 ENST00000257770 NM_002526.3 308 atT/atC 0 # Load expression data and explore expression_data &lt;- read.delim(&quot;/Users/mahedi/Documents/Collaborations/UCL_CI/metabric/brca_metabric/data_mrna_agilent_microarray.txt&quot;,comment.char = &quot;#&quot;, sep = &quot;\\t&quot;, header = T) expression_data[1:10, 1:10] ## Hugo_Symbol Entrez_Gene_Id MB.0362 MB.0346 MB.0386 MB.0574 MB.0185 ## 1 RERE 473 8.676978 9.653589 9.033589 8.814855 8.736406 ## 2 RNF165 494470 6.075331 6.687887 5.910885 5.628740 6.392422 ## 3 PHF7 51533 5.838270 5.600876 6.030718 5.849428 5.542133 ## 4 CIDEA 1149 6.397503 5.246319 10.111816 6.116868 5.184098 ## 5 TENT2 167153 7.906217 8.267256 7.959291 9.206376 8.162845 ## 6 SLC17A3 10786 5.702379 5.521794 5.689533 5.439130 5.464326 ## 7 SDS 10993 6.930741 6.141689 6.529312 6.430102 6.105427 ## 8 ATP6V1C2 245973 5.332863 7.563477 5.482155 5.398675 5.026018 ## 9 F3 2152 5.275676 5.376381 5.463788 5.409761 5.338580 ## 10 FAM71C 196472 5.443896 5.319857 5.254294 5.512298 5.430874 ## MB.0503 MB.0641 MB.0201 ## 1 9.274265 9.286585 8.437347 ## 2 5.908698 6.206729 6.095592 ## 3 5.964661 5.783374 5.737572 ## 4 7.828171 8.744149 5.480091 ## 5 8.706646 8.518929 7.478413 ## 6 5.417484 5.629885 5.686286 ## 7 6.684893 5.632753 5.866132 ## 8 5.266674 5.701353 6.403136 ## 9 5.490693 5.363266 6.341856 ## 10 5.363378 5.191612 5.208379 To begin with, let’s explore the mutation data a bit by plotting the frequency of different types of mutations - head(mutation_data) ## Hugo_Symbol Entrez_Gene_Id Center NCBI_Build Chromosome Start_Position ## 1 TP53 NA METABRIC GRCh37 17 7579344 ## 2 TP53 NA METABRIC GRCh37 17 7579346 ## 3 MLLT4 NA METABRIC GRCh37 6 168299111 ## 4 NF2 NA METABRIC GRCh37 22 29999995 ## 5 SF3B1 NA METABRIC GRCh37 2 198288682 ## 6 NT5E NA METABRIC GRCh37 6 86195125 ## End_Position Strand Consequence Variant_Classification ## 1 7579345 + frameshift_variant Frame_Shift_Ins ## 2 7579347 + protein_altering_variant In_Frame_Ins ## 3 168299111 + missense_variant Missense_Mutation ## 4 29999995 + missense_variant Missense_Mutation ## 5 198288682 + synonymous_variant Silent ## 6 86195125 + synonymous_variant Silent ## Variant_Type Reference_Allele Tumor_Seq_Allele1 Tumor_Seq_Allele2 dbSNP_RS ## 1 INS - - G NA ## 2 INS - - CAG NA ## 3 SNP G G T NA ## 4 SNP G G T NA ## 5 SNP A A T NA ## 6 SNP T T C NA ## dbSNP_Val_Status Tumor_Sample_Barcode Matched_Norm_Sample_Barcode ## 1 NA MTS-T0058 NA ## 2 NA MTS-T0058 NA ## 3 NA MTS-T0058 NA ## 4 NA MTS-T0058 NA ## 5 NA MTS-T0059 NA ## 6 NA MTS-T0059 NA ## Match_Norm_Seq_Allele1 Match_Norm_Seq_Allele2 Tumor_Validation_Allele1 ## 1 NA NA NA ## 2 NA NA NA ## 3 NA NA NA ## 4 NA NA NA ## 5 NA NA NA ## 6 NA NA NA ## Tumor_Validation_Allele2 Match_Norm_Validation_Allele1 ## 1 NA NA ## 2 NA NA ## 3 NA NA ## 4 NA NA ## 5 NA NA ## 6 NA NA ## Match_Norm_Validation_Allele2 Verification_Status Validation_Status ## 1 NA NA NA ## 2 NA NA NA ## 3 NA NA NA ## 4 NA NA NA ## 5 NA NA NA ## 6 NA NA NA ## Mutation_Status Sequencing_Phase Sequence_Source Validation_Method Score ## 1 NA NA NA NA NA ## 2 NA NA NA NA NA ## 3 NA NA NA NA NA ## 4 NA NA NA NA NA ## 5 NA NA NA NA NA ## 6 NA NA NA NA NA ## BAM_File Sequencer t_ref_count t_alt_count n_ref_count n_alt_count ## 1 NA Illumina HiSeq 2,000 NA NA NA NA ## 2 NA Illumina HiSeq 2,000 NA NA NA NA ## 3 NA Illumina HiSeq 2,000 NA NA NA NA ## 4 NA Illumina HiSeq 2,000 NA NA NA NA ## 5 NA Illumina HiSeq 2,000 NA NA NA NA ## 6 NA Illumina HiSeq 2,000 NA NA NA NA ## HGVSc HGVSp HGVSp_Short ## 1 ENST00000269305.4:c.343dup p.His115ProfsTer34 p.H115Pfs*34 ## 2 ENST00000269305.4:c.340_341insCTG p.Leu114delinsSerVal p.L114delinsSV ## 3 ENST00000392108.3:c.1544G&gt;T p.Gly515Val p.G515V ## 4 ENST00000338641.4:c.8G&gt;T p.Gly3Val p.G3V ## 5 ENST00000335508.6:c.45T&gt;A p.Ile15= p.I15= ## 6 ENST00000257770.3:c.924T&gt;C p.Ile308= p.I308= ## Transcript_ID RefSeq Protein_position Codons Hotspot ## 1 ENST00000269305 NM_001126112.2 114 -/C 0 ## 2 ENST00000269305 NM_001126112.2 114 ttg/tCTGtg 0 ## 3 ENST00000392108 NM_001040000.2 515 gGa/gTa 0 ## 4 ENST00000338641 NM_000268.3 3 gGg/gTg 0 ## 5 ENST00000335508 NM_012433.2 15 atT/atA 0 ## 6 ENST00000257770 NM_002526.3 308 atT/atC 0 ggplot(data=mutation_data,mapping = aes(Variant_Classification, fill=Variant_Classification)) + geom_bar() + coord_flip() Now we will build a word cloud of genes that had been affected by mutations - # install.packages(&quot;wordcloud&quot;) library(wordcloud) ## Loading required package: RColorBrewer # We need the gene name and how many times they are affected by any non-synonymous mutation - mutation_wordcloud_data &lt;- mutation_data %&gt;% filter(Consequence != &quot;synonymous_variant&quot;) %&gt;% group_by(Hugo_Symbol) %&gt;% summarise(freq=n()) %&gt;% rename(word=Hugo_Symbol) # Let&#39;s find out some highly affected genes - ggplot(mutation_wordcloud_data %&gt;% filter(freq &gt; 100)) + geom_col(aes(word, freq)) + coord_flip() # Now create the word cloud wordcloud(word=mutation_wordcloud_data %&gt;% pull(word), freq = mutation_wordcloud_data %&gt;% pull(freq), scale=c(5,0.5), # Set min and max scale max.words=100, # Set top n words random.order=FALSE, # Words in decreasing freq rot.per=0.35, # % of vertical words use.r.layout=T, # Use C++ collision detection colors=brewer.pal(8, &quot;Dark2&quot;)) Now, we will subset the loaded data so that we can merge (or join) them together later. We will create new dataset containing - Frequency of mutations per patient from mutation_data. Expression data for selected (but important) genes: \"GATA3\",\"FOXA1\",\"MLPH\",\"ESR1\",\"ERBB2\",\"PGR\",\"TP53\",\"PIK3CA\", \"AKT1\", \"PTEN\", \"PIK3R1\", \"FOXO3\",\"RB1\", \"KMT2C\", \"ARID1A\", \"NCOR1\",\"CTCF\",\"MAP3K1\",\"NF1\",\"CDH1\",\"TBX3\",\"CBFB\",\"RUNX1\", \"USP9X\",\"SF3B1\" Sub-setting sample_data using selected columns: PATIENT_ID, SAMPLE_ID, ER_STATUS, HER2_STATUS, PR_STATUS,GRADE. Sub-setting patient_data using selected columns: PATIENT_ID, THREEGENE, AGE_AT_DIAGNOSIS, CELLULARITY, CHEMOTHERAPY, ER_IHC, HORMONE_THERAPY, INTCLUST, NPI, CLAUDIN_SUBTYPE. And, we will combine all the data based on the patient_ID to create a master dataset that we will use in the rest of the worshop. # Find out the frequency of mutations per patient mutation_per_patient &lt;- mutation_data %&gt;% filter(Consequence != &quot;synonymous_variant&quot;) %&gt;% pull(Tumor_Sample_Barcode) %&gt;% table() %&gt;% data.frame() %&gt;% select(patient_ID = &quot;.&quot;, Mutation_count=Freq) # subsetting and formatting the expression data sub_expression_data &lt;- expression_data %&gt;% filter(Hugo_Symbol %in% c(&quot;GATA3&quot;,&quot;FOXA1&quot;,&quot;MLPH&quot;,&quot;ESR1&quot;,&quot;ERBB2&quot;,&quot;PGR&quot;,&quot;TP53&quot;,&quot;PIK3CA&quot;, &quot;AKT1&quot;, &quot;PTEN&quot;, &quot;PIK3R1&quot;, &quot;FOXO3&quot;,&quot;RB1&quot;, &quot;KMT2C&quot;, &quot;ARID1A&quot;, &quot;NCOR1&quot;,&quot;CTCF&quot;,&quot;MAP3K1&quot;,&quot;NF1&quot;,&quot;CDH1&quot;,&quot;TBX3&quot;,&quot;CBFB&quot;,&quot;RUNX1&quot;, &quot;USP9X&quot;,&quot;SF3B1&quot;)) rownames(sub_expression_data) &lt;- sub_expression_data$Hugo_Symbol sub_expression_data &lt;- sub_expression_data %&gt;% select(-Hugo_Symbol,-Entrez_Gene_Id) %&gt;% t() %&gt;% data.frame() %&gt;% mutate(patient_ID = rownames(.)) # subsetting the sample_data sub_sample_data &lt;- sample_data %&gt;% select(patient_ID = PATIENT_ID, sample_ID = SAMPLE_ID, cancer_type = CANCER_TYPE, cancer_type_detailed = CANCER_TYPE_DETAILED, ER_status = ER_STATUS, HER2_status = HER2_STATUS, PR_status = PR_STATUS, Neoplasm_Histologic_Grade = GRADE) # subsetting the patient data sub_patient_data &lt;- patient_data %&gt;% select(patient_ID = PATIENT_ID, Three_gene_classifier_subtype = THREEGENE, Age_at_diagnosis = AGE_AT_DIAGNOSIS, Cellularity = CELLULARITY, Chemotherapy = CHEMOTHERAPY, ER_status_measured_by_IHC = ER_IHC, Hormone_therapy = HORMONE_THERAPY, Integrative_cluster = INTCLUST, Nottingham_prognostic_index = NPI, PAM50 = CLAUDIN_SUBTYPE) # let&#39;s combine the dataset combined_data &lt;- left_join(sub_patient_data,sub_sample_data, by=&quot;patient_ID&quot;) combined_data &lt;- left_join(combined_data, mutation_per_patient, by=&quot;patient_ID&quot;) combined_data$patient_ID &lt;- gsub(&quot;-&quot;,&quot;.&quot;,combined_data$patient_ID) # replace the &#39;-&#39; sign to &#39;.&#39; in the patient_ID column combined_data &lt;- left_join(combined_data,sub_expression_data, by=&quot;patient_ID&quot;) Now, we will generate a scatter plot using the expression data of Estrogen receptor ESR1 against that of transcription factor GATA3. Then we will build our understanding of their coexpression by building a linear model. We will then refine that based on the ER_status (positive or negative) - ggplot(data = combined_data) + geom_point(mapping = aes(x = GATA3, y = ESR1)) ## Warning: Removed 529 rows containing missing values (`geom_point()`). ggplot(data = combined_data %&gt;% na.omit(), aes(x = GATA3, y = ESR1)) + geom_point() + geom_smooth(method = &quot;lm&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; ggplot(data = combined_data %&gt;% na.omit()) + geom_point(mapping = aes(x = GATA3, y = ESR1,colour = ER_status)) ggplot(data = combined_data %&gt;% na.omit(), aes(x = GATA3, y = ESR1,colour = ER_status)) + geom_point() + geom_smooth(method = &quot;lm&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; On a different note, GATA3 expression is ususlly high in Luminal A subtype of breast cancer and also in positive estrogen receptor (ER+) status (Voduc D et. al.). Let’s find out if that’s try for this study - ggplot(combined_data, aes(PAM50, GATA3)) + geom_boxplot() ## Warning: Removed 529 rows containing non-finite values (`stat_boxplot()`). ggplot(combined_data %&gt;% na.omit(), aes(ER_status, GATA3)) + geom_boxplot() ggplot(combined_data %&gt;% na.omit(), aes(ER_status, GATA3)) + geom_violin(aes(fill=ER_status)) Now, we will look at the distribution of age of the patients at diagnosis as a function of some selected mutated genes. mut_gene &lt;- mutation_data %&gt;% filter(Consequence != &quot;synonymous_variant&quot;) %&gt;% select(gene=Hugo_Symbol,patient_ID=Tumor_Sample_Barcode ) patient_age &lt;- patient_data %&gt;% select(age=AGE_AT_DIAGNOSIS,patient_ID=PATIENT_ID) plot_data &lt;- left_join(mut_gene,patient_age,by=&quot;patient_ID&quot;) %&gt;% filter(gene %in% c(&quot;PIK3CA&quot;, &quot;TP53&quot;, &quot;GATA3&quot;, &quot;CDH1&quot;, &quot;MAP3K1&quot;, &quot;CBFB&quot;, &quot;SF3B1&quot;)) %&gt;% mutate(age_cat = case_when(age &lt; 45 ~ &quot;&lt;45&quot;, age &gt;= 45 &amp; age &lt;= 54 ~ &quot;45-54&quot;, age &gt;= 55 &amp; age &lt;= 64 ~ &quot;55-64&quot;, age &gt; 64 ~ &quot;&gt;64&quot;,)) %&gt;% na.omit() plot_data$age_cat &lt;- factor(plot_data$age_cat, ordered = T, levels = c(&quot;&gt;64&quot;,&quot;55-64&quot;,&quot;45-54&quot;,&quot;&lt;45&quot;)) plot_data %&gt;% group_by(gene,age_cat) %&gt;% select(gene,age_cat) %&gt;% summarise(freq=n()) %&gt;% ggplot() + geom_col(aes(gene,freq, fill=age_cat), position=&quot;fill&quot;, colour=&quot;black&quot;) + scale_fill_manual(values=c(&quot;#568a48&quot;,&quot;#6fad76&quot;,&quot;#aac987&quot;,&quot;#e6ede3&quot;)) + theme_classic() ## `summarise()` has grouped output by &#39;gene&#39;. You can override using the ## `.groups` argument. Can we distinguish any pattern from the plot? Now, we will try to find xplore patterns of co-mutation and mutual exclusivity in a set of 21 driver genes (so-called Mut-driver genes) - #install.packages(&quot;splitstackshape&quot;) library(splitstackshape) library(reshape2) ## ## Attaching package: &#39;reshape2&#39; ## The following object is masked from &#39;package:tidyr&#39;: ## ## smiths # create a matrix for the combination of the frequency of mutatated genes and each patient mat &lt;- t(splitstackshape:::charMat(listOfValues = split( mut_gene$gene,mut_gene$patient_ID), fill = 0L)) # set of 21 Mut-driver genes mat_gene &lt;- c(&quot;PIK3CA&quot;,&quot;AKT1&quot;,&quot;PTEN&quot;,&quot;PIK3R1&quot;,&quot;FOXO3&quot;, &quot;RB1&quot;, &quot;KMT2C&quot;, &quot;ARID1A&quot;,&quot;NCOR1&quot;,&quot;CTCF&quot;, &quot;TP53&quot;, &quot;MAP3K1&quot;, &quot;NF1&quot;,&quot;CDH1&quot;,&quot;GATA3&quot;,&quot;TBX3&quot;,&quot;CBFB&quot;,&quot;RUNX1&quot;,&quot;ERBB2&quot;,&quot;USP9X&quot;,&quot;SF3B1&quot;) # create an empty matrix mat_asso &lt;- matrix(data=NA, nrow = length(mat_gene), ncol = length(mat_gene)) colnames(mat_asso) &lt;- mat_gene rownames(mat_asso) &lt;- mat_gene # fill in the cells with log odds ratio for each pairwise association test for(i in mat_gene){ for(j in mat_gene){ mat_asso[i,j] &lt;- fisher.test(mat[i,],mat[j,])$estimate %&gt;% log() } } # get rid of a triangular half of the matirx mat_asso[upper.tri(mat_asso, diag = T)] &lt;- 0 ggplot(melt(mat_asso), aes(Var1,Var2)) + geom_tile(aes(fill=value), colour=&quot;white&quot;) + scale_fill_gradient2(low = &quot;#7c4d91&quot;, high = &quot;#5e8761&quot;,mid = &quot;white&quot;, limits = c(-2,2)) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.ticks.x = element_blank(), axis.ticks.y = element_blank(), axis.line.x = element_blank(), axis.line.y = element_blank()) + coord_flip() "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
